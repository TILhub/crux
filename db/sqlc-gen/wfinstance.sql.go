// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: wfinstance.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addWFNewInstace = `-- name: AddWFNewInstace :one
INSERT INTO
    public.wfinstance (
        entityid, slice, app, class, workflow, step, loggedat, nextstep, parent
    )
VALUES (
        $1, $2, $3, $4, $5, $6, (NOW()::timestamp), $7, $8
    )
RETURNING
    id,
    loggedat
`

type AddWFNewInstaceParams struct {
	Entityid string      `json:"entityid"`
	Slice    int32       `json:"slice"`
	App      string      `json:"app"`
	Class    string      `json:"class"`
	Workflow string      `json:"workflow"`
	Step     string      `json:"step"`
	Nextstep string      `json:"nextstep"`
	Parent   pgtype.Int4 `json:"parent"`
}

type AddWFNewInstaceRow struct {
	ID       int32            `json:"id"`
	Loggedat pgtype.Timestamp `json:"loggedat"`
}

func (q *Queries) AddWFNewInstace(ctx context.Context, arg AddWFNewInstaceParams) (AddWFNewInstaceRow, error) {
	row := q.db.QueryRow(ctx, addWFNewInstace,
		arg.Entityid,
		arg.Slice,
		arg.App,
		arg.Class,
		arg.Workflow,
		arg.Step,
		arg.Nextstep,
		arg.Parent,
	)
	var i AddWFNewInstaceRow
	err := row.Scan(&i.ID, &i.Loggedat)
	return i, err
}

const getWFINstance = `-- name: GetWFINstance :one

SELECT count(1)
FROM public.wfinstance
WHERE
    slice = $1
    AND app = $2
    AND workflow = $3
    AND entityid = $4
`

type GetWFINstanceParams struct {
	Slice    int32  `json:"slice"`
	App      string `json:"app"`
	Workflow string `json:"workflow"`
	Entityid string `json:"entityid"`
}

func (q *Queries) GetWFINstance(ctx context.Context, arg GetWFINstanceParams) (int64, error) {
	row := q.db.QueryRow(ctx, getWFINstance,
		arg.Slice,
		arg.App,
		arg.Workflow,
		arg.Entityid,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}
