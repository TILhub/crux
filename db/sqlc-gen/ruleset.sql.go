// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: ruleset.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getApp = `-- name: GetApp :one
SELECT app
FROM ruleset
WHERE slice =$1 AND app = $2 AND class = $3 AND brwf = 'W'
`

type GetAppParams struct {
	Slice int32  `json:"slice"`
	App   string `json:"app"`
	Class string `json:"class"`
}

func (q *Queries) GetApp(ctx context.Context, arg GetAppParams) (string, error) {
	row := q.db.QueryRow(ctx, getApp, arg.Slice, arg.App, arg.Class)
	var app string
	err := row.Scan(&app)
	return app, err
}

const getClass = `-- name: GetClass :one
SELECT class 
FROM ruleset
WHERE slice = $1 AND app =$2  AND class = $3 AND brwf ='W'
`

type GetClassParams struct {
	Slice int32  `json:"slice"`
	App   string `json:"app"`
	Class string `json:"class"`
}

func (q *Queries) GetClass(ctx context.Context, arg GetClassParams) (string, error) {
	row := q.db.QueryRow(ctx, getClass, arg.Slice, arg.App, arg.Class)
	var class string
	err := row.Scan(&class)
	return class, err
}

const getWFActiveStatus = `-- name: GetWFActiveStatus :one
SELECT is_active 
FROM ruleset
WHERE slice = $1 AND app =$2  AND class = $3 AND brwf ='W' AND setname = $4
`

type GetWFActiveStatusParams struct {
	Slice   int32  `json:"slice"`
	App     string `json:"app"`
	Class   string `json:"class"`
	Setname string `json:"setname"`
}

func (q *Queries) GetWFActiveStatus(ctx context.Context, arg GetWFActiveStatusParams) (pgtype.Bool, error) {
	row := q.db.QueryRow(ctx, getWFActiveStatus,
		arg.Slice,
		arg.App,
		arg.Class,
		arg.Setname,
	)
	var is_active pgtype.Bool
	err := row.Scan(&is_active)
	return is_active, err
}

const getWFInternalStatus = `-- name: GetWFInternalStatus :one
SELECT is_internal
FROM ruleset
WHERE slice = $1 AND app =$2  AND class = $3 AND brwf ='W' AND setname = $4
`

type GetWFInternalStatusParams struct {
	Slice   int32  `json:"slice"`
	App     string `json:"app"`
	Class   string `json:"class"`
	Setname string `json:"setname"`
}

func (q *Queries) GetWFInternalStatus(ctx context.Context, arg GetWFInternalStatusParams) (bool, error) {
	row := q.db.QueryRow(ctx, getWFInternalStatus,
		arg.Slice,
		arg.App,
		arg.Class,
		arg.Setname,
	)
	var is_internal bool
	err := row.Scan(&is_internal)
	return is_internal, err
}
