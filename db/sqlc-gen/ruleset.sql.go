// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: ruleset.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getApp = `-- name: GetApp :one
SELECT app
FROM ruleset
WHERE
    slice = $1
    AND app = $2
    AND class = $3
    AND brwf = 'W'
`

type GetAppParams struct {
	Slice int32  `json:"slice"`
	App   string `json:"app"`
	Class string `json:"class"`
}

func (q *Queries) GetApp(ctx context.Context, arg GetAppParams) (string, error) {
	row := q.db.QueryRow(ctx, getApp, arg.Slice, arg.App, arg.Class)
	var app string
	err := row.Scan(&app)
	return app, err
}

const getClass = `-- name: GetClass :one
SELECT class
FROM ruleset
WHERE
    slice = $1
    AND app = $2
    AND class = $3
    AND brwf = 'W'
`

type GetClassParams struct {
	Slice int32  `json:"slice"`
	App   string `json:"app"`
	Class string `json:"class"`
}

func (q *Queries) GetClass(ctx context.Context, arg GetClassParams) (string, error) {
	row := q.db.QueryRow(ctx, getClass, arg.Slice, arg.App, arg.Class)
	var class string
	err := row.Scan(&class)
	return class, err
}

const getWFActiveStatus = `-- name: GetWFActiveStatus :one
SELECT is_active
FROM ruleset
WHERE
    slice = $1
    AND app = $2
    AND class = $3
    AND brwf = 'W'
    AND setname = $4
`

type GetWFActiveStatusParams struct {
	Slice   int32  `json:"slice"`
	App     string `json:"app"`
	Class   string `json:"class"`
	Setname string `json:"setname"`
}

func (q *Queries) GetWFActiveStatus(ctx context.Context, arg GetWFActiveStatusParams) (pgtype.Bool, error) {
	row := q.db.QueryRow(ctx, getWFActiveStatus,
		arg.Slice,
		arg.App,
		arg.Class,
		arg.Setname,
	)
	var is_active pgtype.Bool
	err := row.Scan(&is_active)
	return is_active, err
}

const getWFInternalStatus = `-- name: GetWFInternalStatus :one
SELECT is_internal
FROM ruleset
WHERE
    slice = $1
    AND app = $2
    AND class = $3
    AND brwf = 'W'
    AND setname = $4
`

type GetWFInternalStatusParams struct {
	Slice   int32  `json:"slice"`
	App     string `json:"app"`
	Class   string `json:"class"`
	Setname string `json:"setname"`
}

func (q *Queries) GetWFInternalStatus(ctx context.Context, arg GetWFInternalStatusParams) (bool, error) {
	row := q.db.QueryRow(ctx, getWFInternalStatus,
		arg.Slice,
		arg.App,
		arg.Class,
		arg.Setname,
	)
	var is_internal bool
	err := row.Scan(&is_internal)
	return is_internal, err
}

const workFlowNew = `-- name: WorkFlowNew :one
INSERT INTO
    ruleset (
        realm, slice, app, brwf, class, setname, schemaid, is_active, is_internal, ruleset, createdat, createdby
    )
VALUES (
        $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, CURRENT_TIMESTAMP, $11
    )
RETURNING
    id
`

type WorkFlowNewParams struct {
	Realm      int32       `json:"realm"`
	Slice      int32       `json:"slice"`
	App        string      `json:"app"`
	Brwf       BrwfEnum    `json:"brwf"`
	Class      string      `json:"class"`
	Setname    string      `json:"setname"`
	Schemaid   int32       `json:"schemaid"`
	IsActive   pgtype.Bool `json:"is_active"`
	IsInternal bool        `json:"is_internal"`
	Ruleset    []byte      `json:"ruleset"`
	Createdby  string      `json:"createdby"`
}

func (q *Queries) WorkFlowNew(ctx context.Context, arg WorkFlowNewParams) (int32, error) {
	row := q.db.QueryRow(ctx, workFlowNew,
		arg.Realm,
		arg.Slice,
		arg.App,
		arg.Brwf,
		arg.Class,
		arg.Setname,
		arg.Schemaid,
		arg.IsActive,
		arg.IsInternal,
		arg.Ruleset,
		arg.Createdby,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const workflowList = `-- name: WorkflowList :many
select
    id,
    slice,
    app,
    class,
    setname as name,
    is_active,
    is_internal,
    createdat,
    createdby,
    editedat,
    editedby
from ruleset
where
    brwf = 'W'
    AND ($1::INTEGER is null OR slice = $1::INTEGER)
    AND ($2::VARCHAR(20) is null OR app = $2::VARCHAR(20))
    AND ($3::VARCHAR(20) is null OR class = $3::VARCHAR(20))
    AND ($4::VARCHAR(20) is null OR setname = $4::VARCHAR(20))
    AND ($5::BOOLEAN is null OR is_active = $5::BOOLEAN)
    AND ($6::BOOLEAN is null OR is_internal = $6::BOOLEAN)
`

type WorkflowListParams struct {
	Slice      pgtype.Int4 `json:"slice"`
	App        pgtype.Text `json:"app"`
	Class      pgtype.Text `json:"class"`
	Setname    pgtype.Text `json:"setname"`
	IsActive   pgtype.Bool `json:"is_active"`
	IsInternal pgtype.Bool `json:"is_internal"`
}

type WorkflowListRow struct {
	ID         int32            `json:"id"`
	Slice      int32            `json:"slice"`
	App        string           `json:"app"`
	Class      string           `json:"class"`
	Name       string           `json:"name"`
	IsActive   pgtype.Bool      `json:"is_active"`
	IsInternal bool             `json:"is_internal"`
	Createdat  pgtype.Timestamp `json:"createdat"`
	Createdby  string           `json:"createdby"`
	Editedat   pgtype.Timestamp `json:"editedat"`
	Editedby   pgtype.Text      `json:"editedby"`
}

func (q *Queries) WorkflowList(ctx context.Context, arg WorkflowListParams) ([]WorkflowListRow, error) {
	rows, err := q.db.Query(ctx, workflowList,
		arg.Slice,
		arg.App,
		arg.Class,
		arg.Setname,
		arg.IsActive,
		arg.IsInternal,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WorkflowListRow
	for rows.Next() {
		var i WorkflowListRow
		if err := rows.Scan(
			&i.ID,
			&i.Slice,
			&i.App,
			&i.Class,
			&i.Name,
			&i.IsActive,
			&i.IsInternal,
			&i.Createdat,
			&i.Createdby,
			&i.Editedat,
			&i.Editedby,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const workflowget = `-- name: Workflowget :one
select
    id,
    slice,
    app,
    class,
    setname as name,
    is_active,
    is_internal,
    ruleset as flowrules,
    createdat,
    createdby,
    editedat,
    editedby
from ruleset
where
    slice = $1
    and app = $2
    and class = $3
    and setname = $4
    AND brwf = 'W'
`

type WorkflowgetParams struct {
	Slice   int32  `json:"slice"`
	App     string `json:"app"`
	Class   string `json:"class"`
	Setname string `json:"setname"`
}

type WorkflowgetRow struct {
	ID         int32            `json:"id"`
	Slice      int32            `json:"slice"`
	App        string           `json:"app"`
	Class      string           `json:"class"`
	Name       string           `json:"name"`
	IsActive   pgtype.Bool      `json:"is_active"`
	IsInternal bool             `json:"is_internal"`
	Flowrules  []byte           `json:"flowrules"`
	Createdat  pgtype.Timestamp `json:"createdat"`
	Createdby  string           `json:"createdby"`
	Editedat   pgtype.Timestamp `json:"editedat"`
	Editedby   pgtype.Text      `json:"editedby"`
}

func (q *Queries) Workflowget(ctx context.Context, arg WorkflowgetParams) (WorkflowgetRow, error) {
	row := q.db.QueryRow(ctx, workflowget,
		arg.Slice,
		arg.App,
		arg.Class,
		arg.Setname,
	)
	var i WorkflowgetRow
	err := row.Scan(
		&i.ID,
		&i.Slice,
		&i.App,
		&i.Class,
		&i.Name,
		&i.IsActive,
		&i.IsInternal,
		&i.Flowrules,
		&i.Createdat,
		&i.Createdby,
		&i.Editedat,
		&i.Editedby,
	)
	return i, err
}
