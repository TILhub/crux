// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: schema.sql

package sqlc

import (
	"context"
	"encoding/json"
	"time"
)

const wfschemadelete = `-- name: Wfschemadelete :exec
DELETE from schema
where
    id in (
        SELECT a.id
        FROM schema as a, realm as b, realmslice as c
        WHERE
            a.realm = b.id
            and a.slice = c.id
            and a.slice = $1
            and c.realm = b.shortname
            and a.class = $3
            AND a.app = $2
    )
`

type WfschemadeleteParams struct {
	Slice int32  `json:"slice"`
	App   string `json:"app"`
	Class string `json:"class"`
}

func (q *Queries) Wfschemadelete(ctx context.Context, arg WfschemadeleteParams) error {
	_, err := q.db.ExecContext(ctx, wfschemadelete, arg.Slice, arg.App, arg.Class)
	return err
}

const wfschemaget = `-- name: Wfschemaget :one
SELECT a.slice, a.app, a.class, b.longname, a.patternschema, a.actionschema, a.createdat, a.createdby, a.editedat, a.editedby
FROM schema as a, realm as b, realmslice as c
WHERE
    a.realm = b.id
    and a.slice = c.id
    and a.slice = $1
    and c.realm = b.shortname
    and a.class = $3
    AND a.app = $2
`

type WfschemagetParams struct {
	Slice int32  `json:"slice"`
	App   string `json:"app"`
	Class string `json:"class"`
}

type WfschemagetRow struct {
	Slice         int32           `json:"slice"`
	App           string          `json:"app"`
	Class         string          `json:"class"`
	Longname      string          `json:"longname"`
	Patternschema json.RawMessage `json:"patternschema"`
	Actionschema  json.RawMessage `json:"actionschema"`
	Createdat     time.Time       `json:"createdat"`
	Createdby     string          `json:"createdby"`
	Editedat      time.Time       `json:"editedat"`
	Editedby      string          `json:"editedby"`
}

func (q *Queries) Wfschemaget(ctx context.Context, arg WfschemagetParams) (WfschemagetRow, error) {
	row := q.db.QueryRowContext(ctx, wfschemaget, arg.Slice, arg.App, arg.Class)
	var i WfschemagetRow
	err := row.Scan(
		&i.Slice,
		&i.App,
		&i.Class,
		&i.Longname,
		&i.Patternschema,
		&i.Actionschema,
		&i.Createdat,
		&i.Createdby,
		&i.Editedat,
		&i.Editedby,
	)
	return i, err
}
